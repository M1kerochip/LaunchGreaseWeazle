<?xml version="1.0"?>
<doc>
<assembly>
<name>
RunGreaseWeazel
</name>
</assembly>
<members>
<member name="T:RunGreaseWeazel.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:RunGreaseWeazel.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:RunGreaseWeazel.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:RunGreaseWeazel.FrmMain.FrmMain_Load(System.Object,System.EventArgs)">
 <summary>
 Sets the title of the Form with the form name plus exe version number
 </summary>
</member>
<member name="M:RunGreaseWeazel.FrmMain.SetUpScreen">
 <summary>
 Loads settings from VB My.Settings (local) and sets the variables onscreen. Also sets up tooltips.
 </summary>
</member>
<member name="M:RunGreaseWeazel.FrmMain.EnableDarkTheme(System.Boolean)">
 <summary>
 Simple attempt to create an easier to use night mode.
 </summary>
 <param name="EnableDark">If true, set the program to dark, if not set to default</param>
</member>
<member name="M:RunGreaseWeazel.FrmMain.SaveSettings">
 <summary>
 Write Settings out to VB.NET My.Settings section (All settings are per user)
 </summary>
</member>
<member name="M:RunGreaseWeazel.FrmMain.WriteDefaultDiskTypesXML(System.String)">
 <summary>
 Creates an XML file with the v2.2 SCP file format list of manufacturers and disk types. (Used in the onscreen combo boxes (ie just give the combo box index a name)
 </summary>
 <param name="XMLFile">Full Path to the XML file to create</param>
 <returns></returns>
</member>
<member name="M:RunGreaseWeazel.FrmMain.ReadDefaultDiskXML(System.String)">
 <summary>
 
 </summary>
 <param name="XMLFile"></param>
 <returns></returns>
</member>
<member name="M:RunGreaseWeazel.FrmMain.CreateFileName(System.Boolean,System.Boolean)">
 <summary>
 Create a filename from the attributes onscreen. (Including checking if file exists, if necessary)
 </summary>
 <param name="CheckExists">Check to see if the file exists on the disk. If so, append an integer to prevent GreaseSeazle from overwriting.</param>
 <returns>Filename as a string.</returns>
</member>
<member name="M:RunGreaseWeazel.FrmMain.CheckForErrors">
 <summary>
 
 </summary>
 <returns></returns>
</member>
<member name="M:RunGreaseWeazel.FrmMain.Cleanfields">
 <summary>
 
 </summary>
</member>
<member name="M:RunGreaseWeazel.FrmMain.ExecuteCommand(System.String,System.String,System.Int32)">
 <summary>
 Runs an exe or batch file, with the given arguments, with window shown, minimized or hidden.
 </summary>
 <param name="fileToRun">Batch file or EXE to run</param>
 <param name="Arguments">Arguments for the batch/exe</param>
 <param name="WinState">Windows state of the launched program</param>
 <returns>True, if successfully launched.</returns>
</member>
<member name="M:RunGreaseWeazel.FrmMain.AddErrorToMemo(RunGreaseWeazel.GreaseWeazle)">
 <summary>
 Add the GW.ErrorString to the Onscreen Memo text box
 </summary>
 <param name="GW">Greaseweazle instance</param>
 <returns>True, if successful</returns>
</member>
<member name="M:RunGreaseWeazel.FrmMain.FillGWFromScreen(RunGreaseWeazel.GreaseWeazle)">
 <summary>
 Fills in the GW class instance from the main form
 </summary>
 <param name="GW">Greaseweazle class instance to fill in</param>
 <returns>True if successful</returns>
</member>
<member name="M:RunGreaseWeazel.FrmMain.CheckVisible">
 <summary>
 Check to see which buttons, text boxes etc should be visible
 </summary>
</member>
<member name="T:RunGreaseWeazel.GreaseWeazle">
 <summary>
 Class to call the Greaseweazle hardware and action the results.
 </summary>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.GWRead">
 <summary>
 GWRead: Instructs the GW to read tracks from the floppy disk, using the floppy drive.
 </summary>
 <returns>Integer, 0</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.GWWrite">
 <summary>
 GWWrite: Instructs the GW to write tracks to the floppy disk, using the floppy drive from the selected File. (several formats supported for writing)
 </summary>
 <returns>Integer, 1</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.GWErase">
 <summary>
 
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.GWClean">
 <summary>
 GWClean: Instructs the GW to perform a zig zag movement of the head over the disk, from track 0 to EndTrack, staying in each place for xx MS, for xx rotations.
 </summary>
 <returns></returns>
</member>
<member name="M:RunGreaseWeazel.GreaseWeazle.ClearError">
 <summary>
 Clears the ErrorString
 </summary>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.Retries">
 <summary>
 If GWRead/GWWrite fails, this is the number of times the GW unit will retry that action. Default is 3
 </summary>
 <returns>Integer</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.UseManufacturerAndDiskTypeCombined">
 <summary>
 Set the (hex) byte directly, rather than using the GW script label
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.Manufacturer">
 <summary>
 Disk Manufacturer. CBM = 0x00, Atari = 0x10, Apple = 0x20, PC = 0x30, Tandy = 0x40, TI = 0x50, Roland = 0x60, Amstrad = 0x70, Other = 0x80, TapeDrive = 0xE0, HardDrive = 0xF0
 As per SCP v2.2 https://www.cbmstuff.com/downloads/scp/scp_image_specs.txt
 </summary>
 <returns>Integer. Default is 0, Commodore</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.DiskType">
 <summary>
 Disk type (0=CBM, 1=AMIGA, 2=APPLE II, 3=ATARI ST, 4=ATARI 800, 5=MAC 800, 6=360K/720K, 7=1.44MB)
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.ShowTime">
 <summary>
 Show time taken to complete an operation
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.InfoBootloader">
 <summary>
 For F7 devices, show the bootloader info, instead of the device info.
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.CleanPasses">
 <summary>
 Number of revolutions to clean the drive for. Default to 3. Requires a floppy drive cleaning disk.
 </summary>
 <returns>Integer</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.CleanLingerMS">
 <summary>
 When cleaning, linger in each track for xx milliseconds. Default is 100. Requires a floppy drive cleaning disk.
 </summary>
 <returns>Integer</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.Results">
 <summary>
 Holds the results of the GW action.
 </summary>
 <returns>String, containing GW action output.</returns>
</member>
<member name="M:RunGreaseWeazel.GreaseWeazle.ExecuteCommand(System.String,System.String,System.Int32)">
 <summary>
 Runs an exe or batch file, with the given arguments, with window shown, minimized or hidden.
 </summary>
 <param name="fileToRun">Batch file or EXE to run</param>
 <param name="Arguments">Argument for the batch/exe</param>
 <param name="WinState">Windows state of the launched program</param>
 <returns></returns>
</member>
<member name="M:RunGreaseWeazel.GreaseWeazle.UpdateWPC_Formats(System.String)">
 <summary>
 Override the default list of disk formats for WPC
 </summary>
 <param name="NewFormats">CSV list of strings representing disk formats</param>
 <returns>String, containing a list of comma separated strings representing disk formats</returns>
</member>
<member name="M:RunGreaseWeazel.GreaseWeazle.UpdateDriveSTR(System.String)">
 <summary>
 Override the default list of F7 drives
 </summary>
 <param name="NewDrives">CSV list of characters representing F7 drives it can access</param>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.SaveLogFile">
 <summary>
 Save a summery log file to filename.log
 </summary>
 <returns>True to save log</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.RPM">
 <summary>
 Disk Revolution Per Minute. Default is 300.
 </summary>
 <returns>Integer, rpm count.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.Revolutions">
 <summary>
 Number of times to read each track. Default for GW is 3, default for archiving is 5.
 </summary>
 <returns>Integer, 5, unless previously set.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.Sides">
 <summary>
 Drive heads to use in the GW Action. 0, bottom, 1, top or both (0-1).
 </summary>
 <returns>String: Set of sides to use. 0,1 or 0-1</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.TrackStep">
 <summary>
 Number of tracks to move for each head step. Default is 1. Set to 2, to read a 40 track disk in an 80 track drive.
 </summary>
 <returns>Integer. Default is to move 1 track at a time.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.BitCellDataRate">
 <summary>
 The bitcell data read rate.
 </summary>
 <returns>250 for DD disks, 500 for HD disks.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.HeadOffsetEnable">
 <summary>
 Enable to use 5.25" drives, to read 'Flippy' disks. eg C64 etc. Requires an offset set, to be effective.
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.HeadOffsetTrackCount">
 <summary>
 Number of tracks to offset head, for reading (and writing?)
 </summary>
 <returns>Integer, -8 as default, for 5.25" drives with flippy disks</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.WritePreCompensate">
 <summary>
 Enable Write Precompensate. Prevent tracks from overlapping. Useful for later tracks, which are closer together. See Wiki: https://github.com/keirf/Greaseweazle/wiki/Write-Precompensation
 </summary>
 <returns>True to enable.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.WPC_Type">
 <summary>
 The type of disk format to calculate Write PreCompensation. Supported formats: (M)odified (F)requency (M)odulation, (F)requency (M)odulation, or (G)roup (C)oded (R)ecording.
 </summary>
 <returns>String. mfm by default.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.WPC_Width_NanoSeconds">
 <summary>
 
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.WPC_Tracks">
 <summary>
 Apply Write PreCompensation only on tracks, starting with this track. (Only useful on later tracks)
 </summary>
 <returns>Integer, default 40</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.WPC_TrackRange">
 <summary>
 
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.FileName">
 <summary>
 File to write, or to read to. File must exist to perform write. (.Upd file, for GWFirmware also)
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.PythonEXE">
 <summary>
 Path to the GW.exe or to Python.exe, if using the GW script directly
 </summary>
 <returns>Path to the exe.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.PythonScript">
 <summary>
 If using python.exe, this is the path to the GW python script (gw.py) or (gw)
 </summary>
 <returns>Path to the python script</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.COMPort">
 <summary>
 
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.Action">
 <summary>
 The action to make the Greaseweazle perform. Read, write, erase, etc. 11 Commands supported so far.
 </summary>
 <returns>Integer, the GW action.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.StartTrack">
 <summary>
 Track to Start reading/writing from, if not using a track set
 </summary>
 <returns>Start Track (Default is 0)</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.EndTrack">
 <summary>
 Track to end reading/writing etc on, if not using a track set
 </summary>
 <returns>End Track. (default to 83 if track is invalid)</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.TrackGroup">
 <summary>
 Set of tracks to read/write/erase etc. Can be single tracks, or a range. Values are comma separated.
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.EraseEmptyTracks">
 <summary>
 When writing, perform an erase on empty tracks.
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.ScriptFile">
 <summary>
 Runs a windows exe or batch file with the path to the filename as the first argument, after GW process finishes
 </summary>
 <returns>Path to script/exe (If it exists. Blank, otherwise)</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.ExcuteScript">
 <summary>
 Execute Script/EXE in the Scriptfile property.
 </summary>
 <returns>True to execute</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.ExecuteScriptHiddenLevel">
 <summary>
 Runs Script/EXE visible, minimized, or hidden.
 </summary>
 <returns>0: Normal, 1: Minimized, 2: Hidden</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.ExecuteScriptOnGWRead_Only">
 <summary>
 Only run script/exe on 'READ' command
 </summary>
 <returns>True to run on Read, false to run on all actions.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.F7Device">
 <summary>
 Is the Greaseweazle an STM32F703 (F7) or STM32F103 (F1)
 </summary>
 <returns>True for F7 device, false for F1 'bluepill' device</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.F7_Drive">
 <summary>
 F7 drive selection. 'A' (PC Drive, with cable twist), 'B' (with no twist), or DS0-2 Shugart drives
 </summary>
 <returns>Returns PC Drive letter (A/B) or Shugart drive number (0-2)</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.SeekTrack">
 <summary>
 The cylinder/track to find using the 'Seek' command. Track numbers are zero based.
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.Pin">
 <summary>
 Pin to change voltage on.
 </summary>
 <returns>Integer, Pin Number.</returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.PinVoltage">
 <summary>
 Pin voltage. Either On (Pin (H)igh), or off (Pin (L)ow).
 </summary>
 <returns></returns>
</member>
<member name="P:RunGreaseWeazel.GreaseWeazle.ErrorString">
 <summary>
 Last Error string as readable text.
 </summary>
 <returns></returns>
</member>
<member name="M:RunGreaseWeazel.GreaseWeazle.ExecuteGW">
 <summary>
 Main function. Make the GW perform an action
 </summary>
 <returns>True if GW performed action, false if there was an error. Check ErrorString.</returns>
</member>
</members>
</doc>
